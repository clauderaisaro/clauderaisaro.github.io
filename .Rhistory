ggplot(data = df_sf) +
geom_sf() +
geom_point(aes(color = as.factor(treatment)), size = 2) +
annotation_scale(location = "bl", width_hint = 0.5) +
theme_minimal() +
theme(legend.position = "none")
ggplot(data = df_sf) +
geom_sf(aes(color = as.factor(treatment))) +
annotation_scale(location = "bl", width_hint = 0.5) +
theme_minimal() +
theme(legend.position = "none")
# Install and load necessary packages
install.packages('leaflet')
library(leaflet)
# Simulated dataframe with lat, long, and treatment assignment
df <- data.frame(
latitude = runif(358, min = 0.324, max = 0.362),
longitude = runif(358, min = 32.507, max = 32.757),
treatment = c(rep(1, 124), rep(2, 179), rep(3, 55))
)
# Basic leaflet map
m <- leaflet(data = df) %>%
addProviderTiles(providers$OpenStreetMap) %>%
addCircles(lng = ~longitude, lat = ~latitude, color = ~factor(treatment),
popup = ~as.character(treatment),
radius = 300)
m
# Read the CSV file
df <- read.csv("gps_coord_stage.csv")
# Assuming your dataframe df has columns latitude, longitude, and treatment
# You can read your data into df like read.csv('yourfile.csv')
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, color = ~colorFactor("jco", treatment)(treatment),
popup = ~as.character(treatment), radius = 3) %>%
addScaleBar(position = "bottomleft")  # Add scale bar to the map
# Read the CSV file
df <- read.csv("gps_coord_stage.csv")
# Shuffle the data
set.seed(123) # for reproducibility
df <- df[sample(nrow(df)),]
# Assign treatments
df <- df %>%
mutate(treatment = c(rep(1, n_treat1), rep(2, n_treat2), rep(3, n_treat3), rep(NA, nrow(df) - n_treat1 - n_treat2 - n_treat3)))
# Check the data
head(df)
# Assuming your dataframe df has columns latitude, longitude, and treatment
# You can read your data into df like read.csv('yourfile.csv')
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, color = ~colorFactor("jco", treatment)(treatment),
popup = ~as.character(treatment), radius = 3) %>%
addScaleBar(position = "bottomleft")  # Add scale bar to the map
# Show the map
m
# Assuming your dataframe df has columns latitude, longitude, and treatment
# You can read your data into df like read.csv('yourfile.csv')
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, color = "black",
popup = ~as.character(treatment), radius = 3) %>%
addScaleBar(position = "bottomleft")  # Add scale bar to the map
# Show the map
m
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, color = "black",
radius = 3) %>%
addScaleBar(position = "bottomleft")  # Add scale bar to the map
# Show the map
m
# Install and load required packages
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("ggmap", quietly = TRUE)) install.packages("ggmap")
# Load libraries
library(ggplot2)
library(ggmap)
# Get the base map
register_google(key = "your_google_maps_api_key_here")
map1 <- get_map(location = c(lon = mean(df$longitude, na.rm = TRUE), lat = mean(df$latitude, na.rm = TRUE)), zoom = 12, maptype = "roadmap")
register_google(key = "AIzaSyCHuvTE5SlCUnM1VZFYGZZ5t-rrLo4GpMo")
map1 <- get_map(location = c(lon = mean(df$longitude, na.rm = TRUE), lat = mean(df$latitude, na.rm = TRUE)), zoom = 12, maptype = "roadmap")
# Plot the map
ggmap(map1) +
geom_point(data = df, aes(x = longitude, y = latitude), color = "blue", size = 2) +
theme_minimal() +
theme(legend.position = "none")
df <- read.csv("gps_coord_stage.csv")
register_google(key = "AIzaSyCHuvTE5SlCUnM1VZFYGZZ5t-rrLo4GpMo")
map1 <- get_map(location = c(lon = mean(df$longitude, na.rm = TRUE), lat = mean(df$latitude, na.rm = TRUE)), zoom = 12, maptype = "roadmap")
# Plot the map
ggmap(map1) +
geom_point(data = df, aes(x = longitude, y = latitude), color = "blue", size = 2) +
theme_minimal() +
theme(legend.position = "none")
# Plot the map with cleaned data
ggmap(map1) +
geom_point(data = na.omit(df), aes(x = longitude, y = latitude), color = "blue", size = 2) +
theme_minimal() +
theme(legend.position = "none")
df <- read.csv("gps_coord_stage.csv")
df_clean <- na.omit(df)
View(df)
register_google(key = "AIzaSyCHuvTE5SlCUnM1VZFYGZZ5t-rrLo4GpMo")
map1 <- get_map(location = c(lon = mean(df$longitude, na.rm = TRUE), lat = mean(df$latitude, na.rm = TRUE)), zoom = 12, maptype = "roadmap")
# Plot the map
ggmap(map1) +
geom_point(data = df, aes(x = longitude, y = latitude), color = "blue", size = 2) +
theme_minimal() +
theme(legend.position = "none")
ggplot(df, aes(x = longitude, y = latitude)) +
geom_point() +
theme_minimal()
# Read the CSV file
df <- read.csv("gps_coord_stage.csv")
# Shuffle the data
set.seed(123) # for reproducibility
df <- df[sample(nrow(df)),]
# Assign treatments
df <- df %>%
mutate(treatment = c(rep(1, n_treat1), rep(2, n_treat2), rep(3, n_treat3), rep(NA, nrow(df) - n_treat1 - n_treat2 - n_treat3)))
# Check the data
head(df)
# Assuming your dataframe df has columns latitude, longitude, and treatment
# You can read your data into df like read.csv('yourfile.csv')
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, color = "black",
radius = 3) %>%
addScaleBar(position = "bottomleft")  # Add scale bar to the map
# Show the map
m
# Read the CSV file
df <- read.csv("gps_coord_stage.csv")
# Shuffle the data
set.seed(123) # for reproducibility
df <- df[sample(nrow(df)),]
# Assign treatments
df <- df %>%
mutate(treatment = c(rep(1, n_treat1), rep(2, n_treat2), rep(3, n_treat3), rep(NA, nrow(df) - n_treat1 - n_treat2 - n_treat3)))
# Check the data
head(df)
# Assuming your dataframe df has columns latitude, longitude, and treatment
# You can read your data into df like read.csv('yourfile.csv')
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, color = "black",
radius = 3) %>%
addScaleBar(position = "topleft")  # Add scale bar to the map
# Show the map
m
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
color = "black", fillColor = "black",
radius = 3, fillOpacity = 1.0, opacity = 1.0) %>%
addScaleBar(position = "topleft")  # Add scale bar to the map
# Show the map
m
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
color = "black", fillColor = "black",
radius = 3, fillOpacity = 1.0, opacity = 1.0) %>%
addScaleBar(position = "topright")  # Add scale bar to the map
# Show the map
m
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
color = "black", fillColor = "black",
radius = 1, fillOpacity = 1.0, opacity = 1.0) %>%
addScaleBar(position = "topright")  # Add scale bar to the map
# Show the map
m
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
color = "black", fillColor = "black",
radius = 0.5, fillOpacity = 1.0, opacity = 1.0) %>%
addScaleBar(position = "topright")  # Add scale bar to the map
# Show the map
m
##############
# Create the data frame with non-imputed data
df_non_imputed <- data.frame(
treat_assign1 = c(1, 2, 3),
mean_inc = c(5427.419, 6794.872, 4958.678),
type = "Non-Imputed",
hi_inc = NA,
low_inc = NA
)
# Create the data frame with imputed data
df_imputed <- data.frame(
treat_assign1 = c(1, 2, 3),
mean_inc = c(5693.548, 7401.709, 5148.76) - c(5427.419, 6794.872, 4958.678),
type = "Imputed",
hi_inc = c(6168.57, 7971.218, 5586.372),
low_inc = c(5218.526, 6832.201, 4711.149)
)
# Combine the data frames
df_combined <- rbind(df_non_imputed, df_imputed)
# Sort the data by type so that "Imputed" comes on top
df_combined <- df_combined[order(-df_combined$treat_assign1, df_combined$type), ]
# Generate the bar plot for slides
ggplot(df_combined, aes(x = as.factor(treat_assign1), y = mean_inc, fill = interaction(type, treat_assign1))) +
geom_bar(stat = "identity", position = 'stack') +
geom_errorbar(data = df_imputed, aes(x = as.factor(treat_assign1), ymin = low_inc, ymax = hi_inc), position = position_dodge(width = 0.9), width = 0.2) +
# Color Palette
scale_fill_manual(values = c("Non-Imputed.1" = "#66c2a5", "Imputed.1" = "#1b9e77",
"Non-Imputed.2" = "#fc8d62", "Imputed.2" = "#d95f02",
"Non-Imputed.3" = "#8da0cb", "Imputed.3" = "#7570b3")) +
theme_minimal() +
theme(
text = element_text(family = "Latin Modern", size = 16),
axis.title = element_text(size = 18, family = "Latin Modern"),
legend.title = element_blank(),
legend.position = "none",  # This line removes the legend
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(linetype = "dashed", colour = "lightgray")
) +
labs(
x = NULL,
y = "Reservation price for contract (ugx)",
fill = NULL
) +
scale_x_discrete(labels = c("private choice\nprivate terms", "private choice\npublic terms", "public choice\npublic terms"))
# Read the CSV file
df <- read.csv("gps_coord_stage.csv")
# Shuffle the data
set.seed(123) # for reproducibility
df <- df[sample(nrow(df)),]
# Assign treatments
df <- df %>%
mutate(treatment = c(rep(1, n_treat1), rep(2, n_treat2), rep(3, n_treat3), rep(NA, nrow(df) - n_treat1 - n_treat2 - n_treat3)))
# Check the data
head(df)
# Assuming your dataframe df has columns latitude, longitude, and treatment
# You can read your data into df like read.csv('yourfile.csv')
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
color = "black", fillColor = "black",
radius = 0.5, fillOpacity = 1.0, opacity = 1.0) %>%
addScaleBar(position = "topright")  # Add scale bar to the map
# Show the map
m
##############
# Create the data frame with non-imputed data
df_non_imputed <- data.frame(
treat_assign1 = c(1, 2, 3),
mean_inc = c(5427.419, 6794.872, 4958.678),
type = "Non-Imputed",
hi_inc = NA,
low_inc = NA
)
# Create the data frame with imputed data
df_imputed <- data.frame(
treat_assign1 = c(1, 2, 3),
mean_inc = c(5693.548, 7401.709, 5148.76) - c(5427.419, 6794.872, 4958.678),
type = "Imputed",
hi_inc = c(6168.57, 7971.218, 5586.372),
low_inc = c(5218.526, 6832.201, 4711.149)
)
# Combine the data frames
df_combined <- rbind(df_non_imputed, df_imputed)
# Sort the data by type so that "Imputed" comes on top
df_combined <- df_combined[order(-df_combined$treat_assign1, df_combined$type), ]
# Generate the bar plot for slides
ggplot(df_combined, aes(x = as.factor(treat_assign1), y = mean_inc, fill = interaction(type, treat_assign1))) +
geom_bar(stat = "identity", position = 'stack') +
geom_errorbar(data = df_imputed, aes(x = as.factor(treat_assign1), ymin = low_inc, ymax = hi_inc), position = position_dodge(width = 0.9), width = 0.2) +
# Color Palette
scale_fill_manual(values = c("Non-Imputed.1" = "#66c2a5", "Imputed.1" = "#1b9e77",
"Non-Imputed.2" = "#fc8d62", "Imputed.2" = "#d95f02",
"Non-Imputed.3" = "#8da0cb", "Imputed.3" = "#7570b3")) +
theme_minimal() +
theme(
text = element_text(family = "Latin Modern", size = 16),
axis.title = element_text(size = 18, family = "Latin Modern"),
legend.title = element_blank(),
legend.position = "none",  # This line removes the legend
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(linetype = "dashed", colour = "lightgray")
) +
labs(
x = NULL,
y = "Reservation price for contract (ugx)",
fill = NULL
) +
scale_x_discrete(labels = c("private choice\nprivate terms", "private choice\npublic terms", "public choice\npublic terms"))
# Import data from a CSV file
# Replace "your_data.csv" with the path to your actual CSV file
df <- read.csv("db_DE.csv")
df
###################
## favorive options
# Plot COLOR SCALE with minimalistic design PAPER
ggplot(df, aes(x = choice, y = share)) +
geom_line(aes(group = treat_assign1, color = as.factor(treat_assign1)), size = 0.8, linetype = "solid") +
geom_point(aes(shape = as.factor(treat_assign1), fill = as.factor(treat_assign1)), size = 3) +
geom_ribbon(aes(ymin = low_inc, ymax = hi_inc, fill = as.factor(treat_assign1)), alpha = 0.2) +
# Color Palette
scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3"),
labels = c("private choice / private terms", "private choice / public terms", "public choice / public terms")) +
scale_fill_manual(values = c("#1b9e77", "#d95f02", "#7570b3"),
labels = c("private choice / private terms", "private choice / public terms", "public choice / public terms")) +
# Distinguishable shapes
scale_shape_manual(values = c(21, 22, 24),
labels = c("private choice / private terms", "private choice / public terms", "public choice / public terms")) +
scale_x_continuous(breaks = seq(1000, 9000, by = 1000)) +
theme_bw() +
theme(
text = element_text(family = "Latin Modern", size = 14),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
panel.grid.minor = element_blank(),  # Remove all minor grid lines
#panel.grid.major.x = element_line(linetype = "dashed", color = "lightgray"),  # Add major x-axis grid lines back
#panel.grid.major.y = element_line(linetype = "solid", color = "lightgray")  # Existing major y-axis grid lines
panel.grid.major.x = element_line(linetype = "dashed", colour = "lightgray"),
panel.grid.major.y = element_line(linetype = "dashed", colour = "lightgray")
) +
labs(
x = "Outside option (ugx)",
y = "Percent drivers choosing contract",
color = NULL,
shape = NULL,
fill = NULL
)
##############
# Create the data frame with non-imputed data
df_non_imputed <- data.frame(
treat_assign1 = c(1, 2, 3),
mean_inc = c(5427.419, 6794.872, 4958.678),
type = "Non-Imputed",
hi_inc = NA,
low_inc = NA
)
# Create the data frame with imputed data
df_imputed <- data.frame(
treat_assign1 = c(1, 2, 3),
mean_inc = c(5693.548, 7401.709, 5148.76) - c(5427.419, 6794.872, 4958.678),
type = "Imputed",
hi_inc = c(6168.57, 7971.218, 5586.372),
low_inc = c(5218.526, 6832.201, 4711.149)
)
# Combine the data frames
df_combined <- rbind(df_non_imputed, df_imputed)
# Sort the data by type so that "Imputed" comes on top
df_combined <- df_combined[order(-df_combined$treat_assign1, df_combined$type), ]
# Generate the bar plot for slides
ggplot(df_combined, aes(x = as.factor(treat_assign1), y = mean_inc, fill = interaction(type, treat_assign1))) +
geom_bar(stat = "identity", position = 'stack') +
geom_errorbar(data = df_imputed, aes(x = as.factor(treat_assign1), ymin = low_inc, ymax = hi_inc), position = position_dodge(width = 0.9), width = 0.2) +
# Color Palette
scale_fill_manual(values = c("Non-Imputed.1" = "#66c2a5", "Imputed.1" = "#1b9e77",
"Non-Imputed.2" = "#fc8d62", "Imputed.2" = "#d95f02",
"Non-Imputed.3" = "#8da0cb", "Imputed.3" = "#7570b3")) +
theme_minimal() +
theme(
text = element_text(family = "Latin Modern", size = 16),
axis.title = element_text(size = 18, family = "Latin Modern"),
legend.title = element_blank(),
legend.position = "none",  # This line removes the legend
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(linetype = "dashed", colour = "lightgray")
) +
labs(
x = NULL,
y = "Reservation price for contract (ugx)",
fill = NULL
) +
scale_x_discrete(labels = c("private choice\nprivate terms", "private choice\npublic terms", "public choice\npublic terms"))
# Create the data frame with your data
df <- data.frame(
treat_assign1 = c(1, 2, 3),
mean_inc = c(5427.419, 6794.872, 4958.678),
hi_inc = c(5812.207, 7247.589, 5315.953),
low_inc = c(5042.632, 6342.154, 4601.403)
)
# Generate the bar plot for slides
ggplot(df, aes(x = as.factor(treat_assign1), y = mean_inc, fill = as.factor(treat_assign1))) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = low_inc, ymax = hi_inc), position = position_dodge(width = 0.9), width = 0.2) +
# Softer Color Palette
scale_fill_manual(values = c("#66c2a5", "#fc8d62", "#8da0cb")) +
theme_minimal() +
theme(
text = element_text(family = "Latin Modern", size = 16),
axis.title = element_text(size = 18, family = "Latin Modern"),
legend.title = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(linetype = "dashed", colour = "lightgray")
) +
labs(
x = NULL,
y = "Reservation price for contract (ugx)",
fill = NULL
) +
scale_x_discrete(labels = c("private choice\nprivate terms", "private choice\npublic terms", "public choice\npublic terms"))
View(df_combined)
# Read the CSV file
df <- read.csv("gps_coord_stage1.csv")
# Shuffle the data
set.seed(123) # for reproducibility
df <- df[sample(nrow(df)),]
# Assign treatments
df <- df %>%
mutate(treatment = c(rep(1, n_treat1), rep(2, n_treat2), rep(3, n_treat3), rep(NA, nrow(df) - n_treat1 - n_treat2 - n_treat3)))
# Check the data
head(df)
# Assuming your dataframe df has columns latitude, longitude, and treatment
# You can read your data into df like read.csv('yourfile.csv')
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
color = "black", fillColor = "black",
radius = 0.5, fillOpacity = 1.0, opacity = 1.0) %>%
addScaleBar(position = "topright")  # Add scale bar to the map
# Show the map
m
# Get the base map
df <- read.csv("gps_coord_stage1.csv")
df_clean <- na.omit(df)
register_google(key = "AIzaSyCHuvTE5SlCUnM1VZFYGZZ5t-rrLo4GpMo")
map1 <- get_map(location = c(lon = mean(df$longitude, na.rm = TRUE), lat = mean(df$latitude, na.rm = TRUE)), zoom = 12, maptype = "roadmap")
# Plot the map
ggmap(map1) +
geom_point(data = df, aes(x = longitude, y = latitude), color = "blue", size = 2) +
theme_minimal() +
theme(legend.position = "none")
ggplot(df, aes(x = longitude, y = latitude)) +
geom_point() +
theme_minimal()
# Read the CSV file
df <- read.csv("gps_coord_stage1.csv")
# Shuffle the data
set.seed(123) # for reproducibility
df <- df[sample(nrow(df)),]
# Assign treatments
df <- df %>%
mutate(treatment = c(rep(1, n_treat1), rep(2, n_treat2), rep(3, n_treat3), rep(NA, nrow(df) - n_treat1 - n_treat2 - n_treat3)))
# Check the data
head(df)
# Assuming your dataframe df has columns latitude, longitude, and treatment
# You can read your data into df like read.csv('yourfile.csv')
# Create a minimalistic map with CartoDB.Positron as base
m <- leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
color = "black", fillColor = "black",
radius = 0.5, fillOpacity = 1.0, opacity = 1.0) %>%
addScaleBar(position = "topright")  # Add scale bar to the map
# Show the map
m
df <- read.csv("gps_coord_stage1.csv")
df_sf <- st_as_sf(df, coords = c("longitude", "latitude"), crs = 4326)
set.seed(42)
n_treat1 <- 124
n_treat2 <- 179
n_treat3 <- 55
df_sf <- df_sf %>%
sample_frac(1) %>%  # Shuffle rows
mutate(treatment = c(rep(1, n_treat1), rep(2, n_treat2), rep(3, n_treat3), rep(NA, nrow(.) - n_treat1 - n_treat2 - n_treat3)))
ggplot(data = df_sf) +
geom_sf(aes(color = as.factor(treatment))) +
annotation_scale(location = "bl", width_hint = 0.5) +
theme_minimal() +
theme(legend.position = "none")
install.packages("ggplot2")
install.packages("tidyverse")
data <- read.csv("speeding_base_trip.csv")
ggplot(data, aes(x=share_speeding)) +
geom_histogram(aes(y=..count../sum(..count..)), binwidth=0.05, fill="blue", alpha=0.7) +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
labs(title="Distribution of Share of Speeding Trips",
x="Share of Speeding",
y="Percentage of Sample") +
theme_minimal() +
theme(text = element_text(size=16),
axis.title.x = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 16, face = "bold"))
install.packages("ggplot2")
install.packages("tidyverse")
data <- read.csv("speeding_base_trip.csv")
ggplot(data, aes(x=share_speeding)) +
geom_histogram(aes(y=..count../sum(..count..)), binwidth=0.05, fill="blue", alpha=0.7) +
scale_y_continuous(labels=scales::percent_format(scale=1)) +
labs(title="Distribution of Share of Speeding Trips",
x="Share of Speeding",
y="Percentage of Sample") +
theme_minimal() +
theme(text = element_text(size=16),
axis.title.x = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 16, face = "bold"))
